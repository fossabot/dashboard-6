<table id="timers" class="table">
  <tbody>
  <template v-for="stage in stages">
    <tr>
      <td colspan="2"><h3>{{stage.name}}</h3></td>
    </tr>
    <tr class="stage">
      <td>
        <div>
          <label v-bind:for="stage.est_uid">Tiempo estimado:</label>
          <input type="number" v-bind:id="stage.est_uid" class="estimated"
                 v-model="stage.estimated_time_in_seconds" :disabled="stage.estimated">
          <span>minutos</span>
        </div>
        <div>
          <span>Tiempo:</span> <code class="tiempo">{{stage.current_time | timeFormat}}</code>
          <span>minutos</span>
        </div>
      </td>
      <td>
        <button type="button" class="btn btn-lg btn-default" v-on:click="toggle(stage)">
          <i class="fa fa-pause" v-if="running_stage && running_stage.id == stage.id"></i>
          <i class="fa fa-play" v-else></i>
        </button>
      </td>
    </tr>
  </template>
  <tr>
    <td>
      <button class="btn btn-primary" v-on:click="finish()">Terminar</button>
    </td>
    <td>
      <button class="btn btn-danger" v-on:click="cancel()">Cancelar</button>
    </td>
  </tr>
  <tr>
    <td>
      Tiempo estimado total:
    </td>
    <td>
      <span>{{total_estimated_time}}</span>
    </td>
  </tr>
  <tr>
    <td>
      Tiempo total:
    </td>
    <td>
      <span>{{total_time | timeFormat}}</span>
    </td>
  </tr>
  <tr>
    <td colspan="99">
      <h3>Espacio para notas</h3>
      <textarea rows="5" class="form-control">{{solution_notes}}</textarea>
    </td>
  </tr>
  <tr>
    <td colspan="99">
      <button v-on:click="lala()">Add</button>
    </td>
  </tr>
  </tbody>
</table>


<script>

    Vue.filter( 'timeFormat', function( seconds ) {
        var sec = "" + ( seconds % 60 );
        var min = "" + Math.floor( seconds / 60 );
        if ( sec.length === 1 ) {
            sec = "0" + sec;
        }
        if ( min.length === 1 ) {
            min = "0" + min;
        }
        return min + ":" + sec;
    } );





    $( function() {
        "use strict";

        // Config Messenger
        Messenger.options = {
            extraClasses: 'messenger-fixed messenger-on-bottom messenger-on-right',
            theme: 'air'
        };

        // Init
        var done = function( json ) {
            init( json );
        };
        var fail = function() {
            Messenger().hideAll(); // ????
            Messenger().post( {
                message: "HUBO UN ERROR AL INICIAR, ACTUALICE LA PAGINA E INTENTE NUEVAMENTE",
                hideAfter: 9e9,
                type: "error",
                actions: {
                    cancel: {
                        label: 'Actualizar',
                        action: function() {
                            location.reload();
                        }
                    }
                }
            } );
        };
        get( "", "/solutions/" + <%= @solution.id %> + "/start", done, fail ); // XXX
        // XXX
        /*init( {
            solution_id: 1,
            now: moment().format( "X" ),
            stages: [ {
                id: 1,
                name: "Análisis",
                estimated_time_in_seconds: 300,
                total_time_in_seconds: 242,
                started_at: 0,
                running: false
            }, {
                id: 2,
                name: "Casos de prueba",
                estimated_time_in_seconds: 600,
                total_time_in_seconds: 0,
                started_at: +moment().format( "X" ) - 20,
                running: true
            }, {
                id: 3,
                name: "Diseño",
                estimated_time_in_seconds: null,
                total_time_in_seconds: null,
                started_at: 0,
                running: false
            }, {
                id: 4,
                name: "Implementación",
                estimated_time_in_seconds: null,
                total_time_in_seconds: null,
                started_at: 0,
                running: false
            }, {
                id: 5,
                name: "Corrección",
                estimated_time_in_seconds: null,
                total_time_in_seconds: null,
                started_at: 0,
                running: false
            } ]
        } );*/

    } );





    function init( ini ) {
        "use strict";

        var running_stage = null;
        ini.stages.forEach( function( stage, i ) {
            stage.est_uid = "estimacion_" + stage.id;

            stage.estimated = stage.estimated_time_in_seconds ? true : false;
            stage.current_time = stage.total_time_in_seconds;
            if ( stage.running ) {
                running_stage = stage;
                stage.current_time += ini.now - running_stage.started_at;
            }
            delete stage.running;
        } );

        window.app = new Vue( {
            el: '#timers',
            data: {
                moment_init: running_stage ? moment().format( "X" ) - ( ini.now - running_stage.started_at ) : 0,
                moment_server: running_stage ? running_stage.started_at : 0,
                running: !!running_stage,
                finished: false,
                processing: false,

                solution_notes: "",
                total_estimated_time: "0 minutos",
                total_time: 0,

                solution_id: ini.solution_id,
                stages: ini.stages,
                running_stage: running_stage
            },
            created: function() {
                setInterval( this.intervalUpdateRunningTime, 1000 );
                setInterval( this.intervalUpdateTotal, 1000 );
            },
            methods: {
                intervalUpdateRunningTime: function() {
                    if ( !this.running_stage ) {
                        return;
                    }
                    var actual = +moment().format( "X" );
                    this.running_stage.current_time = this.running_stage.total_time_in_seconds + actual - this.running_stage.started_at;
                },
                intervalUpdateTotal: function() {
                    var totalEstimatedTime = 0;
                    var totalTime = this.running_stage ? +moment().format( "X" ) - this.moment_init : 0;

                    this.stages.forEach( function( stage, i ) {
                        totalEstimatedTime += stage.estimated_time_in_seconds;
                        totalTime += stage.total_time_in_seconds;
                    } );

                    this.total_estimated_time = ( totalEstimatedTime / 60 ) + " minutos";
                    this.total_time = totalTime;
                },




              /*
               lala: function() {
               this.stages.push( {
               id: 1,
               name: 'Diseño',
               estimated_time_in_seconds: 242,
               estimated_time_in_minutes: 0,
               started_at: +moment().format( "X" ),
               current_time: +moment().format( "X" ),
               running: true,
               estimated: false
               } );
               },
               */






                toggle: function( stage ) {
                    if ( this.running_stage ) {
                        if ( this.running_stage.id !== stage.id ) {
                            this.pause( function() {
                                this.initStage( stage );
                            } );
                        } else {
                            this.pause();
                        }
                    } else {
                        this.initStage( stage );
                    }
                },
                startProcessing: function() {
                    this.processing = true;
                    // $( ".bplay,.bclose" ).attr( "disabled", "disabled" ).addClass( "disabled" ); // XXX TODO
                },
                endProcessing: function() {
                    this.processing = false;
                    // $( ".bplay,.bclose" ).removeAttr( "disabled" ).removeClass( "disabled" ); // XXX TODO
                },






                initStage: function( stage, done, fail ) {
                    if ( this.finished || this.processing || this.running ) {
                        return;
                    }
                    this.startProcessing();

                    if ( !stage.estimated && !stage.estimated_time_in_seconds ) {
                        Messenger().post( {
                            message: "Debe ingresar una estimacion antes de poder iniciar",
                            hideAfter: 3,
                            type: "error"
                        } );
                        // TODO: https://vuejs.org/v2/api/#ref
                        // stage.estimated_time_in_seconds.focus()
                        this.endProcessing();
                        return;
                    }


                    var data = [];
                    if ( !stage.estimated ) {
                        data.push( {
                            name: "estimated_time_in_seconds",
                            value: stage.estimated_time_in_seconds * 60
                        } );
                    }

                    var that = this;

                    var cb = function( json ) {
                        stage.estimated_time_in_seconds = json.estimated_time_in_seconds;
                        stage.estimated = true;
                        that.running_stage = stage;
                        that.running = true;
                        that.moment_init = +moment().format( "X" );
                        that.moment_server = json.started_at;

                        that.endProcessing();

                        if ( done && done.call ) {
                            done( json );
                        }
                    };

                    var cf = function() {
                        that.endProcessing();

                        if ( fail && fail.call ) {
                            fail();
                        }
                    };

                    post( data, "/solutions/" + this.solution_id + "/timers/" + stage.id + "/play", cb, cf );
                },
                pause: function( done, fail ) {
                    if ( this.finished || this.processing || !this.running ) {
                        return;
                    }
                    this.startProcessing();

                    var that = this;

                    var cb = function( json ) {
                        that.running_stage.total_time_in_seconds = json.total_time_in_seconds;
                        that.running_stage = null;
                        that.running = false;
                        that.moment_init = 0;
                        that.moment_server = 0;

                        that.endProcessing();

                        if ( done && done.call ) {
                            done( json );
                        }
                    };

                    var cf = function() {
                        that.endProcessing();

                        if ( fail && fail.call ) {
                            fail();
                        }
                    };

                    post( "", "/solutions/" + this.solution_id + "/timers/" + this.running_stage.id + "/pause", cb, cf );
                },
                finish: function() {
                    if ( this._finished || this._processing ) {
                        return;
                    }
                    this.startProcessing();

                    var msg = "";
                    var some = false;
                    if ( this.running ) {
                        msg = "Hay un timer corriendo. Detenga el mismo para finalizar.";
                    } else {
                        this.stages.forEach( function( stage, i ) {
                            if ( stage.estimated && stage.total_time_in_seconds ) {
                                some = true;
                                return;
                            }
                        } );
                        if ( !some ) {
                            msg = "¡No se ha realizado ninguna etapa!";
                        }
                    }

                    if ( msg ) {
                        Messenger().post( {
                            message: msg,
                            hideAfter: 5,
                            type: "error"
                        } );
                        this.endProcessing();
                    } else {
                        var that = this;
                        var cb = function() {
                            // TODO
                            // Clean everything, and leave totals
                            // Eventually make graphs
                            that.finished = true;

                            that.endProcessing();
                        };
                        var cf = function() {
                            that.endProcessing();
                        };
                        post( "", "/solutions/" + this.solution_id + "/finish/", cb, cf );
                    }

                },
                cancel: function() {
                    console.log( "TODO" );
                    // TODO
                }
            }
        } );
    }


    function request( type, data, url, done, fail ) {
        if ( !$.isFunction( done ) ) {
            done = $.noop;
        }
        if ( !$.isFunction( fail ) ) {
            fail = $.noop;
        }
        Messenger().run( {
            // successMessage: 'Sincronizado',
            errorMessage: 'Error sincronizando',
            // progressMessage: 'Sincronizando...'
        }, {
            url: url,
            type: type,
            data: data,
            dataType: "json",
            timeout: 3000,
            success: done,
            error: fail
        } );
    }

    function post( data, url, done, fail ) {
        request( "POST", data, url, done, fail );
    }

    function get( data, url, done, fail ) {
        request( "GET", data, url, done, fail );
    }


</script>
