<legend>
  <%= @solution.exercise.name %>

  <%= button_to solution_cancel_path(@solution),
                method: :delete, title: 'Esto borrará tus métricas', class: 'btn btn-default pull-right' do %>
    <i class="fa fa-trash"></i>
  <% end %>

</legend>

<div class="row">
  <div class="col-md-6">

    <dl class="dl-horizontal">
      <dt>Consigna</dt>
      <dd>
        <%= link_to @solution.exercise.url, target: "_blank" do %>
          <%= @solution.exercise.url %> <i class="fa fa-external-link"></i>
        <% end %>
      </dd>
      <dt>Aclaraciones</dt>
      <dd><%= @solution.exercise.notes %></dd>
    </dl>

  </div>
  <div class="col-md-6">
    <blockquote>
      <ul>
        <li>Podés cancelar una planilla de métricas desde el cesto de basura, arriba.</li>
        <li>Para iniciar un temporizador, deberás completar las estimaciones primero. ¡Cuidado! Siempre verificá que haya comenzado.</li>
        <li>Si salís sin finalizar, los temporizadores seguirán corriendo.</li>
        <li>Para finalizar, debajo de todo podés agregar notas y dar por finalizada la métrica.</li>
      </ul>
    </blockquote>
  </div>

</div>

<section class="timers">
  <div class="container" id="main"></div>

  <div class="row" id="finalizar">
    <div class="col-md-12">
      <%= form_for @solution, url: solution_finish_path(@solution) do |f| %>
      <h3>Espacio para notas</h3>
        <%= f.text_area :notes, rows: 5, class: 'form-control' %>
      <hr>
      <button type="submit" class="btn btn-primary">
        Finalizar
      </button>
      <% end %>
    </div>
  </div>

</section>

<script>

    var solutionId = <%= @solution.id %>;

    var labelTime = function (seconds) {
        var sec = "" + ( seconds % 60 );
        var min = "" + Math.floor(seconds / 60);
        if (sec.length === 1) {
            sec = "0" + sec;
        }
        if (min.length === 1) {
            min = "0" + min;
        }
        return min + ":" + sec;
    };


    var Metrica = function Metrica(ini) {
        var _solutionId = ini.solution_id;
        var _stages = [];
        var _running = false;
        var _stageInit = null;
        var _momentInit = 0;
        var _momentServer = 0;
        var _finished = false;
        var _processing = false;

        var startProcessing = function () {
            _processing = true;
            $(".bplay,.bclose").attr("disabled", "disabled").addClass("disabled");
        };
        var endProcessing = function () {
            _processing = false;
            $(".bplay,.bclose").removeAttr("disabled").removeClass("disabled");
        };


        for (var i = 0; i < ini.stages.length; i++) {
            _stages[i] = new Stage(ini.stages[i]);
            if (ini.stages[i].running) {
                _running = true;
                _stageInit = ini.stages[i].id;
                _momentServer = ini.stages[i].started_at;
                _momentInit = moment().format("X") - ( ini.now - ini.stages[i].started_at );
            }
        }
        _stages.sort(function (a, b) {
            return a.getId() - b.getId();
        });


        this.print = function (containerId) {
            var that = this;

            var buttonPlay = function (stage) {
                return $(
                    "<button type='button' data-id='" + stage.getId() + "' class='btn btn-lg btn-default bplay'>" +
                    ( stage.getId() !== _stageInit ? "<i class='fa fa-play'></i>" : "<i class='fa fa-pause'></i>" ) +
                    "</button>"
                );
            };
            var timePanel = function (stage) {
                return $(
                    "<div>" +
                    "<label for='estimated_" + stage.getId() + "'>Tiempo estimado:</label>" +
                    " <input data-id='" + stage.getId() + "' type='number' id='estimated_" + stage.getId() + "' class='estimated' " +
                    ( stage.getEstimatedTimeInSeconds() ? "value='" + stage.getEstimatedTimeInSeconds() / 60 + "' " +
                        "disabled='disabled' " : "" ) + ">" +
                    " <span>minutos</span>" +
                    "</div>" +
                    "<div>" +
                    "<span>Tiempo:</span>" +
                    " <code class='tiempo' data-id='" + stage.getId() + "'>" +
                    labelTime(stage.getTotalTimeInSeconds()) +
                    "</code>" +
                    " <span>minutos</span>" +
                    "</div>"
                );
            };
            var panel = function (stage) {
                var $trs = $(
                    "<tr>" +
                    "<td colspan='2'>" +
                    "<h3>" + stage.getName() + "</h3>" +
                    "</td>" +
                    "</tr>" +
                    "<tr class='stage' data-id='" + stage.getId() + "'>" +
                    "</tr>"
                );
                var $tr = $trs.eq(1);
                $("<td></td>").appendTo($tr).append(timePanel(stage));
                $("<td></td>").appendTo($tr).append(buttonPlay(stage));
                return $trs;
            };
            var total = function () {
                return $(
                    "<tr><td>Tiempo estimado total: </td><td id='totalEstimatedTime'></td></tr>" +
                    "<tr><td>Tiempo total: </td><td id='totalTime'></td></tr>"
                );
            };

            var $table = $("<table class='table'><tbody></tbody></table>");
            var $tbody = $table.children();
            for (var i = 0; i < _stages.length; i++) {
                $tbody.append(panel(_stages[i]));
            }

            var $totals = $("<table class='table table-bordered'><tbody></tbody></table>");

            $("#main").html("").append($table, $totals);


            $("#main").on("click", ".bplay", function (e) {
                e.preventDefault();
                e.stopPropagation();

                var stage = that.searchStage(+$(this).parents(".stage").data("id"));
                var activeStage = that.getActiveStage();

                if (activeStage) {
                    if (activeStage.getId() !== stage.getId()) {
                        that.pause(function () {
                            that.initStage(stage);
                        });
                    } else {
                        that.pause();
                    }
                } else {
                    that.initStage(stage);
                }
            });
        };

        this.getMomentInit = function () {
            return _momentInit;
        };

        this.searchStage = function (id) {
            for (var i = 0; i < _stages.length; i++) {
                if (_stages[i].getId() === id) {
                    return _stages[i];
                }
            }
            return false;
        };

        this.getStages = function () {
            return _stages;
        };

        this.getActiveStage = function () {
            if (_running) {
                return this.searchStage(_stageInit);
            }
            return false;
        };

        this.initStage = function (stage, callback, callfall) {
            if (_finished || _processing || _running) {
                return;
            }
            startProcessing();

            var setEstimacion = false;
            var inputEstimation = $(".estimated").filter("[data-id='" + stage.getId() + "']");
            if (!stage.getEstimatedTimeInSeconds()) {
                var inputEstimationVal = +inputEstimation.val();
                if (!inputEstimationVal) {
                    Messenger().post({
                        message: "Debe ingresar una estimacion antes de poder iniciar",
                        hideAfter: 3,
                        type: "error"
                    });
                    inputEstimation[0].focus();
                    endProcessing();
                    return;
                } else {
                    setEstimacion = inputEstimationVal;
                }
            }

            // Not posible
            if (_stageInit === stage.getId()) {
                endProcessing();
                return;
            }


            var data = [];
            if (setEstimacion) {
                data.push({
                    name: "estimated_time_in_seconds",
                    value: setEstimacion * 60
                });
            }

            var fullCallback = function (json) {
                _running = true;
                _stageInit = json.stage_id;
                _momentInit = +moment().format("X");
                _momentServer = json.started_at;
                stage.setEstimatedTimeInSeconds(json.estimated_time_in_seconds);
                inputEstimation.attr("disabled", "disabled");


                $(".bplay").filter("[data-id='" + stage.getId() + "']").html("<i class='fa fa-pause'></i>");

                endProcessing();

                if (callback && callback.call) {
                    callback(json);
                }
            };

            var fullCallfall = function () {
                endProcessing();

                if (callfall && callfall.call) {
                    callfall();
                }
            };

            post(data, "/solutions/" + _solutionId + "/timers/" + stage.getId() + "/play", fullCallback, fullCallfall);
        };

        this.pause = function (callback, callfall) {
            if (_finished || _processing || !_running) {
                return;
            }
            startProcessing();

            var stage = this.getActiveStage();

            var fullCallback = function (json) {
                stage.setTotalTimeInSeconds(json.total_time_in_seconds);
                _stageInit = null;
                _running = false;
                _momentInit = 0;
                _momentServer = 0;
                $(".bplay").filter("[data-id='" + stage.getId() + "']").html("<i class='fa fa-play'></i>");

                endProcessing();

                if (callback && callback.call) {
                    callback(json);
                }
            };

            var fullCallfall = function () {
                endProcessing();

                if (callfall && callfall.call) {
                    callfall();
                }
            };
            post("", "/solutions/" + _solutionId + "/timers/" + stage.getId() + "/pause", fullCallback, fullCallfall);
        };

        this.iniInterval = function () {
            var that = this;

            var updateRunningTime = function () {
                stage = that.getActiveStage();
                if (!stage) {
                    return;
                }
                var actual = +moment().format("X");
                var $stageTiempo = $(".tiempo").filter("[data-id='" + stage.getId() + "']");
                var sec = Math.floor(stage.getTotalTimeInSeconds() + actual - that.getMomentInit());
                var show = labelTime(sec);
                $stageTiempo.html(show);
            };
            setInterval(updateRunningTime, 1000);
            updateRunningTime();

            var updateTotal = function () {
                var totalEstimatedTime = 0;
                var totalTime = that.getActiveStage() ? +moment().format("X") - that.getMomentInit() : 0;
                var _stages = that.getStages();
                for (var i = 0; i < _stages.length; i++) {
                    totalEstimatedTime += _stages[i].getEstimatedTimeInSeconds();
                    totalTime += _stages[i].getTotalTimeInSeconds();
                }

                $("#totalEstimatedTime").html(( totalEstimatedTime / 60 ) + " minutos");
                $("#totalTime").html(labelTime(totalTime));
            };
            setInterval(updateTotal, 1000);
            updateTotal();
        };


    };


    var Stage = function Stage(stage) {
        var _id = stage.id;
        var _name = stage.name;
        var _estimatedTimeInSeconds = stage.estimated_time_in_seconds;
        var _totalTimeInSeconds = stage.total_time_in_seconds;

        this.setEstimatedTimeInSeconds = function (estimatedTimeInSeconds) {
            if (_estimatedTimeInSeconds) {
                return false;
            }
            _estimatedTimeInSeconds = estimatedTimeInSeconds;
            return true;
        };

        this.getEstimatedTimeInSeconds = function () {
            return _estimatedTimeInSeconds;
        };

        this.setTotalTimeInSeconds = function (totalTimeInSeconds) {
            _totalTimeInSeconds = totalTimeInSeconds;
        };

        this.getTotalTimeInSeconds = function () {
            return _totalTimeInSeconds;
        };

        this.getId = function () {
            return _id;
        };

        this.getName = function () {
            return _name;
        };
    };

    $(function () {
        // Config Messenger
        Messenger.options = {
            extraClasses: 'messenger-fixed messenger-on-bottom messenger-on-right',
            theme: 'air'
        };

        // Init
        var fullCallback = function (json) {
            var metrica = new Metrica(json);
            metrica.print();
            metrica.iniInterval();
        };
        var fullCallfall = function () {
            Messenger().hideAll(); // ????
            Messenger().post({
                message: "HUBO UN ERROR AL INICIAR, ACTUALICE LA PAGINA E INTENTE NUEVAMENTE",
                hideAfter: 9e9,
                type: "error",
                actions: {
                    cancel: {
                        label: 'Actualizar',
                        action: function () {
                            location.reload();
                        }
                    }
                }
            });
        };
        get("", "/solutions/" + solutionId + "/start", fullCallback, fullCallfall);
    });


    function post(data, url, done, fail) {
        var t_u = typeof undefined;
        if (typeof done === t_u) {
            done = $.noop;
        }
        if (typeof fail === t_u) {
            fail = $.noop;
        }
        Messenger().run({
            // successMessage: 'Sincronizado',
            errorMessage: 'Error sincronizando',
            progressMessage: 'Sincronizando...'
        }, {
            url: url,
            type: "POST",
            data: data,
            dataType: "json",
            timeout: 3000,
            success: done,
            error: fail
        });
    }

    function get(data, url, done, fail) {
        var t_u = typeof undefined;
        if (typeof done === t_u) {
            done = $.noop;
        }
        if (typeof fail === t_u) {
            fail = $.noop;
        }
        Messenger().run({
            // successMessage: 'Sincronizado',
            errorMessage: 'Error sincronizando',
            progressMessage: 'Sincronizando...'
        }, {
            url: url,
            type: "GET",
            data: data,
            dataType: "json",
            timeout: 3000,
            success: done,
            error: fail
        });
    }

</script>
